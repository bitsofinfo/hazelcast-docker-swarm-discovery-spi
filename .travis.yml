sudo: required
language: java

addons:
  apt:
    packages:
      - net-tools

services:
  - docker

before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
before_script:

script: 

  # Build FAT jar and Docker container for the test
  # and start socat to map docker socket to 2376 tcp port
  - ./gradlew --refresh-dependencies shadowJar
  - ls -al build/libs
  - docker version
  - docker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 2376:2375 bobrik/socat TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock
  - docker build -t hazelcast-docker-swarm-discovery-spi-test -f Test.Dockerfile .
  - docker images 
  
  # Init swarm and network
  - docker swarm init
  - docker node ls
  - docker network create -d overlay hazelcast-docker-swarm-discovery-spi-test
  
  # Capture the VM's IP
  - export MY_IP=`ifconfig eth0 | grep "inet addr" | cut -d ':' -f 2 | cut -d ' ' -f 1`
  - echo $MY_IP
  
  # Create the service
  - docker service create --network hazelcast-docker-swarm-discovery-spi-test --name hazelcast-docker-swarm-discovery-spi-test -e "DOCKER_HOST=http://$MY_IP:2376" hazelcast-docker-swarm-discovery-spi-test java -DdockerNetworkNames=hazelcast-docker-swarm-discovery-spi-test -DdockerServiceNames=hazelcast-docker-swarm-discovery-spi-test -DhazelcastPeerPort=5701 -Dhazelcast.diagnostics.enabled=true -Dswarm-bind-method=member-address-provider -DswarmMgrUri=http://$MY_IP:2376 -DskipVerifySsl=false -DlogAllServiceNamesOnFailedDiscovery=true -DstrictDockerServiceNameComparison=true -Dhazelcast.max.no.heartbeat.seconds=30 -jar /test.jar
  - docker service ls
  - sleep 10
  - docker service logs hazelcast-docker-swarm-discovery-spi-test
  
  # Dump logs of first container and scale to 10
  - docker ps
  - export CONTAINER1_ID=`docker ps -f "name=hazelcast-docker-swarm-discovery-spi-test.1" --format "{{.ID}}"`
  - docker logs $CONTAINER1_ID
  - docker service scale hazelcast-docker-swarm-discovery-spi-test=10
  
  # Let cluster form w/ 10 nodes and verify there are 10 hz members
  - sleep 80
  - docker ps
  - docker logs $CONTAINER1_ID 
  - export CONTAINER10_ID=`docker ps -f "name=hazelcast-docker-swarm-discovery-spi-test.10" --format "{{.ID}}"`
  - docker logs $CONTAINER10_ID 
  - export MEMBER_TOTAL=`docker logs --tail 50 $CONTAINER1_ID 2>&1 | grep "Members {size:10"`
  - echo $MEMBER_TOTAL
  - if [[ "$MEMBER_TOTAL" == 'Members {size:10'* ]]; then echo "OK"; else exit 1; fi
  
  # Scale cluster down to 2 nodes, wait 2 minutes then verify only 2 nodes
  - docker service scale hazelcast-docker-swarm-discovery-spi-test=2
  - sleep 160
  - docker ps
  - export CONTAINERX_ID=`docker ps -f "name=hazelcast-docker-swarm-discovery-spi-test." --format "{{.ID}}"`
  - CONTAINERX_ID=`echo $CONTAINERX_ID | awk '{ print $1 }'`
  - docker logs --tail 100 $CONTAINERX_ID 
  - export MEMBER_TOTAL=`docker logs --tail 100 $CONTAINERX_ID 2>&1 | grep "Members {size:2"`
  - echo $MEMBER_TOTAL
  - if [[ "$MEMBER_TOTAL" == 'Members {size:2'* ]]; then echo "OK"; else exit 1; fi
  
  # Remove the service
  - docker service rm hazelcast-docker-swarm-discovery-spi-test

  # Test Docker Swarm DNSRR discovery
  - > 
    docker service create
    --network hazelcast-docker-swarm-discovery-spi-test
    --name hazelcast-docker-swarm-dnsrr-discovery-spi-service
    --endpoint-mode dnsrr
    hazelcast-docker-swarm-discovery-spi-test
    java
    -Dswarm-bind-method=dockerDNSRR
    -DserviceName=hazelcast-docker-swarm-dnsrr-discovery-spi-service
    -DservicePort=5701
    -DpeerServicesCsv=hazelcast-docker-swarm-dnsrr-discovery-spi-service:5701
    -Dhazelcast.diagnostics.enabled=true
    -Dhazelcast.max.no.heartbeat.seconds=30
    -jar /test.jar

  # Wait for startup
  - docker service ls
  - sleep 10
  - docker service logs hazelcast-docker-swarm-dnsrr-discovery-spi-service

  # Dump logs of first container and scale to 10
  - docker ps
  - export CONTAINER1_ID=`docker ps -f "name=hazelcast-docker-swarm-dnsrr-discovery-spi-service.1" --format "{{.ID}}"`
  - docker logs $CONTAINER1_ID
  - docker service scale hazelcast-docker-swarm-dnsrr-discovery-spi-service=10

  # Let cluster form w/ 10 nodes and verify there are 10 hz members
  - sleep 80
  - docker ps
  - docker logs $CONTAINER1_ID
  - export CONTAINER10_ID=`docker ps -f "name=hazelcast-docker-swarm-dnsrr-discovery-spi-service.10" --format "{{.ID}}"`
  - docker logs $CONTAINER10_ID
  - export MEMBER_TOTAL=`docker logs --tail 150 $CONTAINER1_ID 2>&1 | grep "Members {size:10"`
  - echo $MEMBER_TOTAL
  - if [[ "$MEMBER_TOTAL" == 'Members {size:10'* ]]; then echo "OK"; else exit 1; fi

  # Scale cluster down to 2 nodes, wait 2 minutes then verify only 2 nodes
  - docker service scale hazelcast-docker-swarm-dnsrr-discovery-spi-service=2
  - sleep 160
  - docker ps
  - export CONTAINERX_ID=`docker ps -f "name=hazelcast-docker-swarm-dnsrr-discovery-spi-service." --format "{{.ID}}"`
  - CONTAINERX_ID=`echo $CONTAINERX_ID | awk '{ print $1 }'`
  - docker logs --tail 150 $CONTAINERX_ID
  - export MEMBER_TOTAL=`docker logs --tail 150 $CONTAINERX_ID 2>&1 | grep "Members {size:2"`
  - echo $MEMBER_TOTAL
  - if [[ "$MEMBER_TOTAL" == 'Members {size:2'* ]]; then echo "OK"; else exit 1; fi

  - docker service rm hazelcast-docker-swarm-dnsrr-discovery-spi-service

jdk:
  - openjdk8
